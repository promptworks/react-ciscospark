/* eslint complexity: ["error", 10] */
import {fromJS, OrderedMap} from 'immutable';
import {
  ACKNOWLEDGE_ACTIVITY,
  ADD_ACTIVITIES_TO_CONVERSATION,
  CREATE_CONVERSATION,
  CREATE_CONVERSATION_BEGIN,
  RECEIVE_MERCURY_ACTIVITY,
  RECEIVE_MERCURY_COMMENT,
  UPDATE_CONVERSATION_STATE,
  UPDATE_MERCURY_STATE
} from './actions';

export const MOCK_CONVERSATION = `conversation/MOCK_CONVERSATION`;

export const initialState = fromJS({
  activities: new OrderedMap(),
  id: null,
  lastAcknowledgedActivityId: null,
  participants: [],
  status: {
    isFetching: false,
    isLoaded: false,
    isLoadingHistoryUp: false,
    isLoadingMissing: false,
    isListeningToActivity: false,
    isListeningToTyping: false,
    error: null
  }
});

export default function reducer(state = initialState, action) {
  switch (action.type) {
  case ACKNOWLEDGE_ACTIVITY: {
    return state.set(`lastAcknowledgedActivityId`, action.payload.activity.id);
  }
  case ADD_ACTIVITIES_TO_CONVERSATION: {
    const addedActivities = new OrderedMap(action.payload.activities.map((activity) => [activity.url, activity]));
    let activities = state.get(`activities`).mergeDeep(addedActivities);
    activities = activities.sortBy((activity) => activity.published);
    return state.set(`activities`, activities);
  }

  case CREATE_CONVERSATION_BEGIN: {
    return state.setIn([`status`, `isFetching`], true);
  }

  case MOCK_CONVERSATION: {
    const conversationActivities = action.payload
    let activities = new OrderedMap(conversationActivities.map(activity => [activity.url, activity]))
    activities = activities.sortBy(activity => activity.published)
    return state.set(`activities`, activities)
  }

  case CREATE_CONVERSATION: {
    const {
      defaultActivityEncryptionKeyUrl,
      avatar,
      displayName,
      id,
      kmsResourceObjectUrl,
      locusUrl,
      participants,
      tags,
      published,
      url,
      lastReadableActivityDate
    } = action.payload.conversation;

    const conversationActivities = action.payload.conversation.activities.items;

    let activities = new OrderedMap(conversationActivities.map((activity) => [activity.url, activity]));
    activities = activities.sortBy((activity) => activity.published);

    activities = new OrderedMap()

    return state
      .set(`activities`, activities)
      .mergeDeep({
        avatar,
        displayName,
        defaultActivityEncryptionKeyUrl,
        id,
        kmsResourceObjectUrl,
        locusUrl,
        url,
        published,
        tags,
        lastReadableActivityDate,
        status: {
          isFetching: false,
          isLoaded: true
        },
        participants: participants.items
      });
  }

  case RECEIVE_MERCURY_ACTIVITY: {
    return receiveMercuryActivity(state, action);
  }

  case RECEIVE_MERCURY_COMMENT: {
    const receivedActivity = action.payload.activity;
    let activities = state.get(`activities`).set(receivedActivity.url, receivedActivity);
    activities = activities.sortBy((activity) => activity.published);
    return state.set(`activities`, activities);
  }

  case UPDATE_CONVERSATION_STATE: {
    return state.merge(action.payload.conversationState);
  }

  case UPDATE_MERCURY_STATE: {
    return state.mergeIn([`status`], action.payload.mercuryState);
  }

  default: {
    return state;
  }
  }
}

function receiveMercuryActivity(state, action) {
  let activities = state.get(`activities`);
  let participants = state.get(`participants`);
  const {activity} = action.payload;
  const {verb} = activity;
  if (verb === `delete`) {
    // Find activity that is being deleted and change it to a tombstone
    const deletedId = activity.object.id;
    activities = activities.map((activityItem) => {
      if (activityItem.id === deletedId) {
        return Object.assign({}, activityItem, {
          verb: `tombstone`
        });
      }
      return activityItem;
    });
  }
  else if (verb === `acknowledge`) {
    // acknowledge is a read receipt. we need to update the participants who
    // are listed in this acknowledgement
    const actorId = activity.actor.id;
    participants = state.get(`participants`).map((participant) => {
      if (participant.get(`id`) === actorId) {
        return participant
          .setIn([`roomProperties`, `lastSeenActivityUUID`], activity.object.id)
          .setIn([`roomProperties`, `lastSeenActivityDate`], activity.published);
      }
      return participant;
    });
  }
  return state.set(`activities`, activities).set(`participants`, participants);
}
